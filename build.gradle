plugins {
    id 'dev.architectury.loom' version "${loom_version}"
    id 'io.github.juuxel.loom-vineflower' version "${vineflower_version}"
    id 'io.github.p03w.machete' version '2.0.1'
    id 'maven-publish'
}

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_17

group = project.maven_group
archivesBaseName = project.archives_base_name
String buildNumber = System.getenv("GITHUB_RUN_NUMBER")
version = "${mod_version}${ buildNumber != null ? "-${buildNumber}" : "" }+mc${minecraft_version}"

def generatedResources = file("src/generated/resources")

sourceSets.main.resources {
    srcDir(generatedResources)
    exclude ".cache/"
}

loom {
    silentMojangMappingsLicense()

    forge {
        //mixinConfig "create_dd.mixins.json"
    }

    runs {
        data {
            data()
            programArgs '--mod', 'create_dd'
            programArg '--all'
            programArgs '--output', file('src/generated/resources/').absolutePath
            programArgs '--existing', file('src/main/resources/').absolutePath
        }
    }
}

repositories {
    mavenCentral()
    mavenLocal()
    maven { url 'https://maven.parchmentmc.org' }
    maven { url 'https://maven.quiltmc.org/repository/release' }
    maven { url 'https://maven.blamejared.com/' }

    maven {
        url 'https://maven.tterrag.com/'
        content {
            includeGroup 'com.jozufozu.flywheel'
            includeGroup 'com.tterrag.registrate'
            includeGroup 'com.simibubi.create'
        }
    }
    maven {
        url 'https://api.modrinth.com/maven'
        content { includeGroup 'maven.modrinth' }
    }
    maven {
        url 'https://www.cursemaven.com'
        content { includeGroup "curse.maven" }
    }
}

configurations {
    jarJar // include a mod with yours

    modImplementation.extendsFrom jarJar
    include.extendsFrom jarJar
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"

    mappings(loom.layered {
        it.mappings("org.quiltmc:quilt-mappings:${minecraft_version}+build.${quilt_mappings}:intermediary-v2")
        it.parchment("org.parchmentmc.data:parchment-${minecraft_version}:${parchment_version}@zip")
        it.officialMojangMappings { nameSyntheticMembers = false }
    })

    forge "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    // Create and Co.
    modImplementation "com.tterrag.registrate:Registrate:${registrate_version}"
    modImplementation("com.simibubi.create:create-${minecraft_version}:${create_version}:slim") { transitive = false }
    modImplementation "com.jozufozu.flywheel:flywheel-forge-${minecraft_version}:${flywheel_version}"

    // JEI
    modCompileOnly "mezz.jei:jei-1.19.2-common-api:${jei_version}"
    modCompileOnly "mezz.jei:jei-1.19.2-forge-api:${jei_version}"
    //modRuntimeOnly "mezz.jei:jei-1.19.2-forge:${jei_version}" broken because loom

    // Dev QOL
    modRuntimeOnly "curse.maven:better-mods-button-541584:3963202"
    modRuntimeOnly "curse.maven:ferritecore-429235:4117906"
    modRuntimeOnly "curse.maven:catalogue-459701:4171024"
}

processResources {
    def props = [
            version: mod_version,
            forge_version: forge_version.split("\\.")[0], // only specify major version of forge
            minecraft_version: minecraft_version,
            create_version: create_version.split("-")[0] // cut off build number
    ]
    inputs.properties props

    filesMatching("META-INF/mods.toml") {
        expand props
    }
}

// disable machete locally for faster builds
machete { enabled = buildNumber != null }

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    it.options.release.set 17
}

java { withSourcesJar() }

remapJar {
    archiveClassifier = 'dev'
}